// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vmware/vsphere-automation-sdk-go/services/nsxt/orgs/projects/vpcs (interfaces: IPAddressAllocationClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/vmware/vsphere-automation-sdk-go/services/nsxt/model"
)

// MockIPAddressAllocationClient is a mock of IPAddressAllocationClient interface.
type MockIPAddressAllocationClient struct {
	ctrl     *gomock.Controller
	recorder *MockIPAddressAllocationClientMockRecorder
}

// MockIPAddressAllocationClientMockRecorder is the mock recorder for MockIPAddressAllocationClient.
type MockIPAddressAllocationClientMockRecorder struct {
	mock *MockIPAddressAllocationClient
}

// NewMockIPAddressAllocationClient creates a new mock instance.
func NewMockIPAddressAllocationClient(ctrl *gomock.Controller) *MockIPAddressAllocationClient {
	mock := &MockIPAddressAllocationClient{ctrl: ctrl}
	mock.recorder = &MockIPAddressAllocationClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPAddressAllocationClient) EXPECT() *MockIPAddressAllocationClientMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockIPAddressAllocationClient) Delete(arg0, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIPAddressAllocationClientMockRecorder) Delete(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIPAddressAllocationClient)(nil).Delete), arg0, arg1, arg2, arg3)
}

// Get mocks base method.
func (m *MockIPAddressAllocationClient) Get(arg0, arg1, arg2, arg3 string) (model.VpcIpAddressAllocation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(model.VpcIpAddressAllocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIPAddressAllocationClientMockRecorder) Get(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIPAddressAllocationClient)(nil).Get), arg0, arg1, arg2, arg3)
}

// List mocks base method.
func (m *MockIPAddressAllocationClient) List(arg0, arg1, arg2 string, arg3 *string, arg4 *bool, arg5 *string, arg6 *int64, arg7 *bool,
	arg8 *string) (model.VpcIpAddressAllocationListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
	ret0, _ := ret[0].(model.VpcIpAddressAllocationListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIPAddressAllocationClientMockRecorder) List(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIPAddressAllocationClient)(nil).List), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
}

// Patch mocks base method.
func (m *MockIPAddressAllocationClient) Patch(arg0, arg1, arg2, arg3 string, arg4 model.VpcIpAddressAllocation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Patch", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// Patch indicates an expected call of Patch.
func (mr *MockIPAddressAllocationClientMockRecorder) Patch(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockIPAddressAllocationClient)(nil).Patch), arg0, arg1, arg2, arg3, arg4)
}

// Update mocks base method.
func (m *MockIPAddressAllocationClient) Update(arg0, arg1, arg2, arg3 string, arg4 model.VpcIpAddressAllocation) (model.VpcIpAddressAllocation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(model.VpcIpAddressAllocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockIPAddressAllocationClientMockRecorder) Update(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIPAddressAllocationClient)(nil).Update), arg0, arg1, arg2, arg3, arg4)
}
